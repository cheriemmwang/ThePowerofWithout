doctype html
html
  head
    link(rel='stylesheet', href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css')
    script(src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js')
    include includes/head.pug
    script(src = '../countries.json')

    style.
      #map {position: absolute; top: 60px; bottom: 0; left: 0; right: 0;}
      .info { padding: 6px 8px; font: 14px/16px Arial, Helvetica, sans-serif; background: white; background: rgba(255,255,255,0.8); 
              box-shadow: 0 0 15px rgba(0,0,0,0.2); border-radius: 5px; } .info h4 { margin: 0 0 5px; color: #777; }
      .legend { text-align: left; line-height: 18px; color: #555; } .legend i { width: 18px; height: 18px; float: left; margin-right: 8px; opacity: 0.7; }
    
  
  body
    - let activeTab = 1;
    include includes/nav.pug
    #map
    script.

      var attri = '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>'
      var mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}';
     
      var token = 'pk.eyJ1IjoiY2hlcmllbW13YW5nIiwiYSI6ImNrYnIwZmkzbzJydm4yb214YW5yMThhdDQifQ.wOsnvJaOKRX6asQdqi5WrA';
      
      var points = !{JSON.stringify(settlements)};
      console.log(typeof points); // Notice: this is an object! 
      
      //defining a layergroup for all data inputs
      var layerGroup = L.layerGroup();
	
      //inputting data
      for (var i = 0; i < points.length; ++i){
        var name = points[i]["name"];
        var population = points[i]["site"].origin["population"];
        var causes = points[i]["site"].origin["causes"];
        var country = points[i]["country"];
        var continent = points[i]["site"].origin["geolocation"];

        if (population == null){
          var rad = 10000;
        }
        else{
          var rad = points[i]["site"].origin["population"]/20;
        }

        //circle colours and size
        if (causes.localeCompare("Squatting")==0){
          var col = '#FC4E2A';
        }
        else if (causes.localeCompare("Refugee Camp")==0){
          var col = 'blue';
        }
        else if (causes.localeCompare("Illegal Subdivision")==0){
          var col = 'green';
        }
        else{
          var col = 'orange';
        }

        var circle = L.circle(points[i]["geolocation"]["coordinates"], {
        color: col,
        fillColor: col,
        fillOpacity: 0.5,
        radius: rad
        });
        circle.bindPopup(name + "<br>" + country + "<br>" + population + "<br>" + causes + "<br>" + continent);
       
        layerGroup.addLayer(circle);
        };

        //create the map and its base layers

        var light   = L.tileLayer(mbUrl, {id: 'mapbox/light-v10', tileSize: 512, zoomOffset: -1, maxZoom: 18,
                       detectRetina: true, attribution: attri, accessToken: token}),
            dark  = L.tileLayer(mbUrl, {id: 'mapbox/dark-v10', tileSize: 512, zoomOffset: -1, maxZoom: 18,
                       detectRetina: true, attribution: attri, accessToken: token}),
            satellite = L.tileLayer(mbUrl, {id: 'mapbox/satellite-streets-v11',tileSize: 512, zoomOffset: -1, maxZoom: 18,
                       detectRetina: true, attribution: attri, accessToken: token});
        


        var map = L.map('map', {
          center: [0,0],
          zoom: 3,
          layers: [light, layerGroup]
        });

        var baseLayers = {
          "light": light,
          "dark": dark,
          "satellite": satellite
        };

        var overlays = {
          "settlements": layerGroup
        };

        //control that shows population information on hover
        var info = L.control();

        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info');
          this.update();
          return this._div;
        };

        info.update = function (value) {
          this._div.innerHTML = '<h4>US Population living in informal settlements* </h4>' + value
          '<br>Informality index</br>';
        };

        info.addTo(map);
            L.control.layers(baseLayers, overlays).addTo(map);
     
      function getColor(d) {
          return d > 1000 ? '#800026' :
                d > 500  ? '#BD0026' :
                d > 200  ? '#E31A1C' :
                d > 100  ? '#FC4E2A' :
                d > 50   ? '#FD8D3C' :
                d > 20   ? '#FEB24C' :
                d > 10   ? '#FED976' :
                            '#FFEDA0';
      }

        //legend
      var legend = L.control({position: 'bottomright'});

      legend.onAdd = function (map) {

          var div = L.DomUtil.create('div', 'info legend'),
          grades = [0, 10, 20, 50, 100, 200, 500, 1000],
          labels = [];

          for (var i = 0; i < grades.length; i++) {
              div.innerHTML +=
                  '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                  grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
      }

      return div;
      };

      legend.addTo(map);


      //for the country data (unsure code)
    //  var geojson = L.geoJson(countries);
